/*
   This file has been generated by IDA.
   It contains local type definitions from
     C:\Documents and Settings\Administrator\Desktop\ntoskrnl.idb
*/

#define MAXIMUM_VOLUME_LABEL_LENGTH   (32 * sizeof(WCHAR))
#define DEVICE_TYPE ULONG

#define SID_HASH_SIZE 32 

#define TRANSACTION_NOTIFY_PREPREPARE 0x00000001 
#define TRANSACTION_NOTIFY_PREPARE 0x00000002 
#define TRANSACTION_NOTIFY_COMMIT 0x00000004 
#define TRANSACTION_NOTIFY_ROLLBACK 0x00000008
#define SE_MAX_AUDIT_PARAMETERS 32
#define EXCEPTION_MAXIMUM_PARAMETERS 15
#define ANYSIZE_ARRAY 1

//BASIC TYPES

typedef short SHORT;

typedef short CSHORT;

typedef char CCHAR;

typedef unsigned char UCHAR;

typedef char CHAR;

typedef long LONG;

typedef unsigned int ULONG32;

typedef unsigned short WORD;

#if defined(_WIN64)
 typedef unsigned __int64 ULONG_PTR;
#else
 typedef unsigned long ULONG_PTR;
#endif
/*
#if !defined(_M_IX86)
 typedef unsigned __int64 ULONGLONG;
#else
 typedef double ULONGLONG;
#endif*/
/*
#if !defined(_M_IX86)
 typedef __int64 LONGLONG; 
#else
 typedef double LONGLONG;
#endif
*/

typedef ULONG_PTR SIZE_T;

typedef unsigned long DWORD;

typedef unsigned long ULONG;

typedef unsigned char BYTE;

typedef unsigned short USHORT;

typedef unsigned short wchar_t;

typedef wchar_t WCHAR;

typedef void *PVOID;

typedef unsigned __int64 UINT64;

typedef signed __int64 INT64;

typedef WCHAR *PWSTR;

typedef PVOID HANDLE;

typedef LONG NTSTATUS;

typedef BYTE BOOLEAN;
/*
typedef struct _GUID {
  DWORD Data1;
  WORD  Data2;
  WORD  Data3;
  BYTE  Data4[8];
} GUID;*/
/*
typedef struct _LSA_UNICODE_STRING {
  USHORT Length;
  USHORT MaximumLength;
  PWSTR  Buffer;
} LSA_UNICODE_STRING, *PLSA_UNICODE_STRING, UNICODE_STRING, *PUNICODE_STRING;*/
/*
typedef struct {
  WORD  wLength;
  WORD  wValueLength;
  WORD  wType;
  WCHAR szKey;
  WORD  Padding;
  WORD  Value;
} STRING;*/
/*
typedef union _LARGE_INTEGER {
  struct {
    DWORD LowPart;
    LONG  HighPart;
  };
  struct {
    DWORD LowPart;
    LONG  HighPart;
  } u;
  LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;*/
/*
typedef struct _ULARGE_INTEGER
{
     union
     {
          struct
          {
               ULONG LowPart;
               ULONG HighPart;
          };
          UINT64 QuadPart;
     };
} ULARGE_INTEGER, *PULARGE_INTEGER;*/

//OTHER TYPES

typedef ULONG_PTR  KAFFINITY;

typedef UCHAR KIRQL;

typedef LARGE_INTEGER PHYSICAL_ADDRESS;

typedef GUID DEVPROPGUID, *PDEVPROPGUID;

typedef ULONG DEVPROPID, *PDEVPROPID;

typedef ULONG_PTR SID_HASH_ENTRY;

typedef unsigned short USHORTP;

typedef ULONG DEVPROPTYPE, *PDEVPROPTYPE;

typedef ULONG_PTR KSPIN_LOCK;

typedef KSPIN_LOCK *PKSPIN_LOCK;

//OPAQUE STRUCTURES

typedef struct _JOB_ACCESS_STATE *PJOB_ACCESS_STATE;

typedef struct _FLS_CALLBACK_INFO *PFLS_CALLBACK_INFO;

typedef struct _ASSEMBLY_STORAGE_MAP *PASSEMBLY_STORAGE_MAP;

typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

typedef struct _KTRANSACTION *PKTRANSACTION;

typedef struct _ECP_LIST * PECP_LIST;

typedef struct _KENLISTMENT * PKENLISTMENT;

typedef PVOID ALPC_HANDLE, *PALPC_HANDLE;

typedef VOID
(NTAPI *PIO_DEVICE_EJECT_CALLBACK)(
   IN NTSTATUS Status,
   IN OUT OPTIONAL PVOID Context);

//STRUCTURES PROTOTYPES

struct _KPRCB;

struct _KTHREAD;

struct _DEVICE_OBJECT;

struct _DRIVER_OBJECT;

struct _IO_CLIENT_EXTENSION;

struct _MDL;

struct _EPROCESS;

struct _RTL_CRITICAL_SECTION;

struct _DEVICE_OBJECT;

struct _KRESOURCEMANAGER;

//ENUMERATIONS
/*
typedef enum _KINTERRUPT_POLARITY
{
         InterruptPolarityUnknown = 0,
         InterruptActiveHigh = 1,
         InterruptActiveLow = 2
} KINTERRUPT_POLARITY;*/

typedef enum _KTRANSACTION_STATE
{
         KTransactionUninitialized = 0,
         KTransactionActive = 1,
         KTransactionPreparing = 2,
         KTransactionPrepared = 3,
         KTransactionInDoubt = 4,
         KTransactionCommitted = 5,
         KTransactionAborted = 6,
         KTransactionDelegated = 7,
         KTransactionPrePreparing = 8,
         KTransactionForgotten = 9,
         KTransactionRecovering = 10,
         KTransactionSavepointing = 11,
         KTransactionPrePrepared = 12
} KTRANSACTION_STATE;

typedef enum _KTRANSACTION_OUTCOME
{
         KTxOutcomeUninitialized = 0,
         KTxOutcomeUndetermined = 1,
         KTxOutcomeCommitted = 2,
         KTxOutcomeAborted = 3,
         KTxOutcomeUnavailable = 4
} KTRANSACTION_OUTCOME;
/*
typedef enum _KINTERRUPT_MODE
{
         LevelSensitive = 0,
         Latched = 1
} KINTERRUPT_MODE;*/
/*
typedef enum tagTOKEN_TYPE { 
  TokenPrimary        = 1,
  TokenImpersonation
} TOKEN_TYPE, *PTOKEN_TYPE;*/

typedef enum {
    STATE_FALSE     = 0,
    STATE_UNKNOWN   = 1,
    STATE_TRUE      = 2
} EM_RULE_STATE;
typedef EM_RULE_STATE   *PEM_RULE_STATE;
/*
typedef enum _IO_ALLOCATION_ACTION
{
         KeepObject = 1,
         DeallocateObject = 2,
         DeallocateObjectKeepRegisters = 3
} IO_ALLOCATION_ACTION, *PIO_ALLOCATION_ACTION;*/

typedef struct _PS_CLIENT_SECURITY_CONTEXT
{
     union
     {
          ULONG ImpersonationData;
          PVOID ImpersonationToken;
          ULONG ImpersonationLevel: 2;
          ULONG EffectiveOnly: 1;
     };
} PS_CLIENT_SECURITY_CONTEXT, *PPS_CLIENT_SECURITY_CONTEXT;
/*
typedef struct _MMSUPPORT_FLAGS
{
     ULONG SessionSpace: 1;
     ULONG ModwriterAttached: 1;
     ULONG TrimHard: 1;
     ULONG MaximumWorkingSetHard: 1;
     ULONG ForceTrim: 1;
     ULONG MinimumWorkingSetHard: 1;
     ULONG SessionMaster: 1;
     ULONG TrimmerAttached: 1;
     ULONG TrimmerDetaching: 1;
     ULONG Reserved: 7;
     ULONG MemoryPriority: 8;
     ULONG WsleDeleted: 1;
     ULONG VmExiting: 1;
     ULONG Available: 6;
} MMSUPPORT_FLAGS, *PMMSUPPORT_FLAGS;*/

typedef enum //Da erro no IDA PRO
{
         KtmUninitialized = 0,
         KtmInitialized = 1,
         KtmRecovering = 2,
         KtmOnline = 3,
         KtmRecoveryFailed = 4,
         KtmOffline = 5
} KTM_STATE;

typedef enum _KRESOURCEMANAGER_STATE
{
         KResourceManagerUninitialized = 0,
         KResourceManagerOffline = 1,
         KResourceManagerOnline = 2
} KRESOURCEMANAGER_STATE;

//MAIN STRUCTURES
/*
typedef struct _SID_IDENTIFIER_AUTHORITY
{
     UCHAR Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;*/
/*
typedef struct _SID
{
     UCHAR Revision;
     UCHAR SubAuthorityCount;
     SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
     ULONG SubAuthority[1];
} SID, *PSID;*/
/*
typedef struct _LUID {
  DWORD LowPart;
  LONG  HighPart;
} LUID, *PLUID;*/
/*
typedef struct _FLOATING_SAVE_AREA
{
     ULONG ControlWord;
     ULONG StatusWord;
     ULONG TagWord;
     ULONG ErrorOffset;
     ULONG ErrorSelector;
     ULONG DataOffset;
     ULONG DataSelector;
     UCHAR RegisterArea[80];
     ULONG Cr0NpxState;
} FLOATING_SAVE_AREA, *PFLOATING_SAVE_AREA;*/
/*
typedef struct _CONTEXT
{
     ULONG ContextFlags;
     ULONG Dr0;
     ULONG Dr1;
     ULONG Dr2;
     ULONG Dr3;
     ULONG Dr6;
     ULONG Dr7;
     FLOATING_SAVE_AREA FloatSave;
     ULONG SegGs;
     ULONG SegFs;
     ULONG SegEs;
     ULONG SegDs;
     ULONG Edi;
     ULONG Esi;
     ULONG Ebx;
     ULONG Edx;
     ULONG Ecx;
     ULONG Eax;
     ULONG Ebp;
     ULONG Eip;
     ULONG SegCs;
     ULONG EFlags;
     ULONG Esp;
     ULONG SegSs;
     UCHAR ExtendedRegisters[512];
} CONTEXT, *PCONTEXT;

typedef struct _SINGLE_LIST_ENTRY {
  struct _SINGLE_LIST_ENTRY  *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;

typedef struct _HANDLE_TABLE_ENTRY_INFO
{
     ULONG AuditMask;
} HANDLE_TABLE_ENTRY_INFO, *PHANDLE_TABLE_ENTRY_INFO;

typedef struct _HANDLE_TABLE_ENTRY
{
     union
     {
          PVOID Object;
          ULONG ObAttributes;
          PHANDLE_TABLE_ENTRY_INFO InfoTable;
          ULONG Value;
     };
     union
     {
          ULONG GrantedAccess;
          struct
          {
               WORD GrantedAccessIndex;
               WORD CreatorBackTraceIndex;
          };
          LONG NextFreeTableEntry;
     };
} HANDLE_TABLE_ENTRY, *PHANDLE_TABLE_ENTRY;

typedef struct _LIST_ENTRY
{
     struct _LIST_ENTRY *Flink;
     struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY;


typedef struct _IO_TIMER
{
     SHORT Type;
     SHORT TimerFlag;
     LIST_ENTRY TimerList;
     PVOID TimerRoutine;
     PVOID Context;
     struct _DEVICE_OBJECT *DeviceObject;
} IO_TIMER, *PIO_TIMER;

typedef struct _DISPATCHER_HEADER
{
     union
     {
          struct
          {
               UCHAR Type;
               union
               {
                    UCHAR Abandoned;
                    UCHAR Absolute;
                    UCHAR NpxIrql;
                    UCHAR Signalling;
               };
               union
               {
                    UCHAR Size;
                    UCHAR Hand;
               };
               union
               {
                    UCHAR Inserted;
                    UCHAR DebugActive;
                    UCHAR DpcActive;
               };
          };
          LONG Lock;
     };
     LONG SignalState;
     LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, *PDISPATCHER_HEADER;

struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

typedef struct _EXCEPTION_RECORD {
  DWORD                    ExceptionCode;
  DWORD                    ExceptionFlags;
  struct _EXCEPTION_RECORD  *ExceptionRecord;
  PVOID                    ExceptionAddress;
  DWORD                    NumberParameters;
  ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_POINTERS {
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT          ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;

typedef struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
}EH3_EXCEPTION_REGISTRATION, *PEH3_EXCEPTION_REGISTRATION;

struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  PEH3_EXCEPTION_REGISTRATION registration;
};

typedef struct _KSEMAPHORE
{
     DISPATCHER_HEADER Header;
     LONG Limit;
} KSEMAPHORE, *PKSEMAPHORE;

typedef struct _IO_STATUS_BLOCK {
  union {
    NTSTATUS Status;
    PVOID    Pointer;
  };
  ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;

typedef struct _KEVENT
{
     DISPATCHER_HEADER Header;
} KEVENT, *PKEVENT;

typedef struct _SLIST_HEADER
{
     union
     {
          UINT64 Alignment;
          struct
          {
               SINGLE_LIST_ENTRY Next;
               WORD Depth;
               WORD Sequence;
          };
     };
} SLIST_HEADER, *PSLIST_HEADER;

typedef struct _BASE_MCB {
   ULONG MaximumPairCount;
   ULONG PairCount;
   USHORT PoolType;
   USHORT Flags;
   PVOID Mapping;
} BASE_MCB, *PBASE_MCB;*/

typedef enum _KENLISTMENT_STATE
{
         KEnlistmentUninitialized = 0,
         KEnlistmentActive = 256,
         KEnlistmentPreparing = 257,
         KEnlistmentPrepared = 258,
         KEnlistmentInDoubt = 259,
         KEnlistmentCommitted = 260,
         KEnlistmentCommittedNotify = 261,
         KEnlistmentCommitRequested = 262,
         KEnlistmentAborted = 263,
         KEnlistmentDelegated = 264,
         KEnlistmentDelegatedDisconnected = 265,
         KEnlistmentPrePreparing = 266,
         KEnlistmentForgotten = 267,
         KEnlistmentRecovering = 268,
         KEnlistmentSavepointing = 269,
         KEnlistmentAborting = 270,
         KEnlistmentReadOnly = 271,
         KEnlistmentOutcomeUnavailable = 272,
         KEnlistmentOffline = 273,
         KEnlistmentPrePrepared = 274,
         KEnlistmentInitialized = 275
} KENLISTMENT_STATE;
/*
typedef enum _POOL_TYPE
{
         NonPagedPool = 0,
         PagedPool = 1,
         NonPagedPoolMustSucceed = 2,
         DontUseThisType = 3,
         NonPagedPoolCacheAligned = 4,
         PagedPoolCacheAligned = 5,
         NonPagedPoolCacheAlignedMustS = 6,
         MaxPoolType = 7,
         NonPagedPoolSession = 32,
         PagedPoolSession = 33,
         NonPagedPoolMustSucceedSession = 34,
         DontUseThisTypeSession = 35,
         NonPagedPoolCacheAlignedSession = 36,
         PagedPoolCacheAlignedSession = 37,
         NonPagedPoolCacheAlignedMustSSession = 38
} POOL_TYPE;*/

typedef struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
}SCOPETABLE_ENTRY, *PSCOPETABLE_ENTRY;

typedef struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
}EH3_EXCEPTION_REGISTRATION, *PEH3_EXCEPTION_REGISTRATION;

typedef struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  EH3_EXCEPTION_REGISTRATION registration;
}CPPEH_RECORD, *PCPPEH_RECORD;

typedef struct _KENLISTMENT_HISTORY
{
     ULONG Notification;
     KENLISTMENT_STATE NewState;
} KENLISTMENT_HISTORY, *PKENLISTMENT_HISTORY;

typedef struct _KTMNOTIFICATION_PACKET
{
	int name;
}KTMNOTIFICATION_PACKET, *PKTMNOTIFICATION_PACKET; // 0 elements, 0x0 bytes (sizeof)

typedef struct _KTMOBJECT_NAMESPACE_LINK
{
     PVOID Links;
     UCHAR Expired;
} KTMOBJECT_NAMESPACE_LINK, *PKTMOBJECT_NAMESPACE_LINK;

/*typedef struct _REPARSE_DATA_BUFFER {
     ULONG  ReparseTag;
     USHORT ReparseDataLength;
     USHORT Reserved;
     union {
         struct {
             USHORT SubstituteNameOffset;
             USHORT SubstituteNameLength;
             USHORT PrintNameOffset;
             USHORT PrintNameLength;
             ULONG Flags;
             WCHAR PathBuffer[1];
         } SymbolicLinkReparseBuffer;
         struct {
             USHORT SubstituteNameOffset;
             USHORT SubstituteNameLength;
             USHORT PrintNameOffset;
             USHORT PrintNameLength;
             WCHAR PathBuffer[1];
         } MountPointReparseBuffer;
         struct {
             UCHAR  DataBuffer[1];
         } GenericReparseBuffer;
     };
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;*/
/*
typedef struct _KQUEUE
{
     DISPATCHER_HEADER Header;
     LIST_ENTRY EntryListHead;
     ULONG CurrentCount;
     ULONG MaximumCount;
     LIST_ENTRY ThreadListHead;
} KQUEUE, *PKQUEUE;

typedef struct _RTL_BALANCED_LINKS
{
     struct _RTL_BALANCED_LINKS *Parent;
     struct _RTL_BALANCED_LINKS *LeftChild;
     struct _RTL_BALANCED_LINKS *RightChild;
     CHAR Balance;
     UCHAR Reserved[3];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS;

typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
         GenericLessThan = 0,
         GenericGreaterThan = 1,
         GenericEqual = 2
} RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

typedef enum _SE_ADT_PARAMETER_TYPE {
   SeAdtParmTypeNone = 0,
   SeAdtParmTypeString,
   SeAdtParmTypeFileSpec,
   SeAdtParmTypeUlong,
   SeAdtParmTypeSid,
   SeAdtParmTypeLogonId,
   SeAdtParmTypeNoLogonId,
   SeAdtParmTypeAccessMask,
   SeAdtParmTypePrivs,
   SeAdtParmTypeObjectTypes,
   SeAdtParmTypeHexUlong,
   SeAdtParmTypePtr,
   SeAdtParmTypeTime,
   SeAdtParmTypeGuid,
   SeAdtParmTypeLuid,
   SeAdtParmTypeHexInt64,
   SeAdtParmTypeStringList,
   SeAdtParmTypeSidList,
   SeAdtParmTypeDuration,
   SeAdtParmTypeUserAccountControl,
   SeAdtParmTypeNoUac,
   SeAdtParmTypeMessage,
   SeAdtParmTypeDateTime,
   SeAdtParmTypeSockAddr,
   SeAdtParmTypeSD,
   SeAdtParmTypeLogonHours,
   SeAdtParmTypeLogonIdNoSid,
   SeAdtParmTypeUlongNoConv,
   SeAdtParmTypeSockAddrNoPort,
   SeAdtParmTypeAccessReason
} SE_ADT_PARAMETER_TYPE, *PSE_ADT_PARAMETER_TYPE;

typedef struct _RTL_AVL_TABLE
{
     RTL_BALANCED_LINKS BalancedRoot;
     PVOID OrderedPointer;
     ULONG WhichOrderedElement;
     ULONG NumberGenericTableElements;
     ULONG DepthOfTree;
     PRTL_BALANCED_LINKS RestartKey;
     ULONG DeleteCount;
     PRTL_GENERIC_COMPARE_RESULTS CompareRoutine;
     PVOID * AllocateRoutine;
     PVOID FreeRoutine;
     PVOID TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE;

typedef struct _KGDTENTRY
{
     WORD LimitLow;
     WORD BaseLow;
     ULONG HighWord;
} KGDTENTRY, *PKGDTENTRY;

typedef struct _KIDTENTRY
{
     WORD Offset;
     WORD Selector;
     WORD Access;
     WORD ExtendedOffset;
} KIDTENTRY, *PKIDTENTRY;

typedef struct _KEXECUTE_OPTIONS
{
     ULONG ExecuteDisable: 1;
     ULONG ExecuteEnable: 1;
     ULONG DisableThunkEmulation: 1;
     ULONG Permanent: 1;
     ULONG ExecuteDispatchEnable: 1;
     ULONG ImageDispatchEnable: 1;
     ULONG Spare: 2;
} KEXECUTE_OPTIONS, *PKEXECUTE_OPTIONS;

typedef struct _KPROCESS
{
     DISPATCHER_HEADER Header;
     LIST_ENTRY ProfileListHead;
     ULONG DirectoryTableBase;
     ULONG Unused0;
     KGDTENTRY LdtDescriptor;
     KIDTENTRY Int21Descriptor;
     WORD IopmOffset;
     UCHAR Iopl;
     UCHAR Unused;
     ULONG ActiveProcessors;
     ULONG KernelTime;
     ULONG UserTime;
     LIST_ENTRY ReadyListHead;
     SINGLE_LIST_ENTRY SwapListEntry;
     PVOID VdmTrapcHandler;
     LIST_ENTRY ThreadListHead;
     ULONG ProcessLock;
     ULONG Affinity;
     union
     {
          ULONG AutoAlignment: 1;
          ULONG DisableBoost: 1;
          ULONG DisableQuantum: 1;
          ULONG ReservedFlags: 29;
          LONG ProcessFlags;
     };
     CHAR BasePriority;
     CHAR QuantumReset;
     UCHAR State;
     UCHAR ThreadSeed;
     UCHAR PowerState;
     UCHAR IdealNode;
     UCHAR Visited;
     union
     {
          KEXECUTE_OPTIONS Flags;
          UCHAR ExecuteOptions;
     };
     ULONG StackCount;
     LIST_ENTRY ProcessListEntry;
     UINT64 CycleTime;
} KPROCESS, *PKPROCESS;

typedef struct _KAPC_STATE
{
     LIST_ENTRY ApcListHead[2];
     PKPROCESS Process;
     UCHAR KernelApcInProgress;
     UCHAR KernelApcPending;
     UCHAR UserApcPending;
} KAPC_STATE, *PKAPC_STATE;

typedef struct _KWAIT_BLOCK
{
     LIST_ENTRY WaitListEntry;
     struct _KTHREAD *Thread;
     PVOID Object;
     struct _KWAIT_BLOCK0 *NextWaitBlock;
     WORD WaitKey;
     UCHAR WaitType;
     UCHAR SpareByte;
} KWAIT_BLOCK, *PKWAIT_BLOCK;

typedef struct _KGATE
{
     DISPATCHER_HEADER Header;
} KGATE, *PKGATE;

typedef struct _KDPC
{
     UCHAR Type;
     UCHAR Importance;
     WORD Number;
     LIST_ENTRY DpcListEntry;
     PVOID DeferredRoutine;
     PVOID DeferredContext;
     PVOID SystemArgument1;
     PVOID SystemArgument2;
     PVOID DpcData;
} KDPC, *PKDPC;

typedef struct _KTIMER
{
     DISPATCHER_HEADER Header;
     ULARGE_INTEGER DueTime;
     LIST_ENTRY TimerListEntry;
     PKDPC Dpc;
     LONG Period;
} KTIMER, *PKTIMER;

typedef enum _EXCEPTION_DISPOSITION
{
         ExceptionContinueExecution = 0,
         ExceptionContinueSearch = 1,
         ExceptionNestedException = 2,
         ExceptionCollidedUnwind = 3
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
     struct _EXCEPTION_REGISTRATION_RECORD *Next;
     PEXCEPTION_DISPOSITION Handler;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _KTRAP_FRAME
{
     ULONG DbgEbp;
     ULONG DbgEip;
     ULONG DbgArgMark;
     ULONG DbgArgPointer;
     WORD TempSegCs;
     UCHAR Logging;
     UCHAR Reserved;
     ULONG TempEsp;
     ULONG Dr0;
     ULONG Dr1;
     ULONG Dr2;
     ULONG Dr3;
     ULONG Dr6;
     ULONG Dr7;
     ULONG SegGs;
     ULONG SegEs;
     ULONG SegDs;
     ULONG Edx;
     ULONG Ecx;
     ULONG Eax;
     ULONG PreviousPreviousMode;
     PEXCEPTION_REGISTRATION_RECORD ExceptionList;
     ULONG SegFs;
     ULONG Edi;
     ULONG Esi;
     ULONG Ebx;
     ULONG Ebp;
     ULONG ErrCode;
     ULONG Eip;
     ULONG SegCs;
     ULONG EFlags;
     ULONG HardwareEsp;
     ULONG HardwareSegSs;
     ULONG V86Es;
     ULONG V86Ds;
     ULONG V86Fs;
     ULONG V86Gs;
} KTRAP_FRAME, *PKTRAP_FRAME;

typedef struct _KAPC
{
     UCHAR Type;
     UCHAR SpareByte0;
     UCHAR Size;
     UCHAR SpareByte1;
     ULONG SpareLong0;
     struct _KTHREAD *Thread;
     LIST_ENTRY ApcListEntry;
     PVOID KernelRoutine;
     PVOID RundownRoutine;
     PVOID NormalRoutine;
     PVOID NormalContext;
     PVOID SystemArgument1;
     PVOID SystemArgument2;
     CHAR ApcStateIndex;
     CHAR ApcMode;
     UCHAR Inserted;
} KAPC, *PKAPC;

typedef struct _DESCRIPTOR
{
     WORD Pad;
     WORD Limit;
     ULONG Base;
} DESCRIPTOR, *PDESCRIPTOR;

typedef struct _KSPECIAL_REGISTERS
{
     ULONG Cr0;
     ULONG Cr2;
     ULONG Cr3;
     ULONG Cr4;
     ULONG KernelDr0;
     ULONG KernelDr1;
     ULONG KernelDr2;
     ULONG KernelDr3;
     ULONG KernelDr6;
     ULONG KernelDr7;
     DESCRIPTOR Gdtr;
     DESCRIPTOR Idtr;
     WORD Tr;
     WORD Ldtr;
     ULONG Reserved[6];
} KSPECIAL_REGISTERS, *PKSPECIAL_REGISTERS;

typedef struct _KPROCESSOR_STATE
{
     CONTEXT ContextFrame;
     KSPECIAL_REGISTERS SpecialRegisters;
} KPROCESSOR_STATE, *PKPROCESSOR_STATE;

typedef struct _KSPIN_LOCK_QUEUE
{
     struct _KSPIN_LOCK_QUEUE *Next;
     ULONG * Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE;*/

typedef struct _CACHED_KSTACK_LIST
{
     SLIST_HEADER SListHead;
     LONG MinimumFree;
     ULONG Misses;
     ULONG MissesLast;
} CACHED_KSTACK_LIST, *PCACHED_KSTACK_LIST;
/*
typedef struct _KNODE
{
     SLIST_HEADER PagedPoolSListHead;
     SLIST_HEADER NonPagedPoolSListHead[3];
     SLIST_HEADER PfnDereferenceSListHead;
     ULONG ProcessorMask;
     UCHAR Color;
     UCHAR Seed;
     UCHAR NodeNumber;
     DWORD Flags;
     ULONG MmShiftedColor;
     ULONG FreeCount[2];
     PSINGLE_LIST_ENTRY PfnDeferredList;
     CACHED_KSTACK_LIST CachedKernelStacks;
} KNODE, *PKNODE;*/
/*
typedef struct _GENERAL_LOOKASIDE
{
     union
     {
          SLIST_HEADER ListHead;
          SINGLE_LIST_ENTRY SingleListHead;
     };
     WORD Depth;
     WORD MaximumDepth;
     ULONG TotalAllocates;
     union
     {
          ULONG AllocateMisses;
          ULONG AllocateHits;
     };
     ULONG TotalFrees;
     union
     {
          ULONG FreeMisses;
          ULONG FreeHits;
     };
     POOL_TYPE Type;
     ULONG Tag;
     ULONG Size;
     union
     {
          PVOID * AllocateEx;
          PVOID * Allocate;
     };
     union
     {
          PVOID FreeEx;
          PVOID Free;
     };
     LIST_ENTRY ListEntry;
     ULONG LastTotalAllocates;
     union
     {
          ULONG LastAllocateMisses;
          ULONG LastAllocateHits;
     };
     ULONG Future[2];
} GENERAL_LOOKASIDE, *PGENERAL_LOOKASIDE;

typedef struct _PP_LOOKASIDE_LIST
{
     PGENERAL_LOOKASIDE P;
     PGENERAL_LOOKASIDE L;
} PP_LOOKASIDE_LIST, *PPP_LOOKASIDE_LIST;*/

typedef struct _GENERAL_LOOKASIDE_POOL
{
     union
     {
          SLIST_HEADER ListHead;
          SINGLE_LIST_ENTRY SingleListHead;
     };
     WORD Depth;
     WORD MaximumDepth;
     ULONG TotalAllocates;
     union
     {
          ULONG AllocateMisses;
          ULONG AllocateHits;
     };
     ULONG TotalFrees;
     union
     {
          ULONG FreeMisses;
          ULONG FreeHits;
     };
     POOL_TYPE Type;
     ULONG Tag;
     ULONG Size;
     union
     {
          PVOID * AllocateEx;
          PVOID * Allocate;
     };
     union
     {
          PVOID FreeEx;
          PVOID Free;
     };
     LIST_ENTRY ListEntry;
     ULONG LastTotalAllocates;
     union
     {
          ULONG LastAllocateMisses;
          ULONG LastAllocateHits;
     };
     ULONG Future[2];
} GENERAL_LOOKASIDE_POOL, *PGENERAL_LOOKASIDE_POOL;
/*
typedef struct _KDPC_DATA
{
     LIST_ENTRY DpcListHead;
     ULONG DpcLock;
     LONG DpcQueueDepth;
     ULONG DpcCount;
} KDPC_DATA, *PKDPC_DATA;

typedef struct _FX_SAVE_AREA
{
     BYTE U[520];
     ULONG NpxSavedCpu;
     ULONG Cr0NpxState;
} FX_SAVE_AREA, *PFX_SAVE_AREA;

typedef struct 
{
     UINT64 StartTime;
     UINT64 EndTime;
     ULONG Reserved[4];
} PROCESSOR_IDLE_TIMES, *PPROCESSOR_IDLE_TIMES;
*/
typedef struct 
{
     ULONG IdleTransitions;
     ULONG FailedTransitions;
     ULONG InvalidBucketIndex;
     UINT64 TotalTime;
     ULONG IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct 
{
     ULONG Frequency;
     ULONG Power;
     UCHAR PercentFrequency;
     UCHAR IncreaseLevel;
     UCHAR DecreaseLevel;
     UCHAR Type;
     UINT64 Control;
     UINT64 Status;
     ULONG TotalHitCount;
     ULONG DesiredCount;
} PPM_PERF_STATE, *PPPM_PERF_STATE;

typedef struct 
{
     ULONG Count;
     ULONG MaxFrequency;
     ULONG MaxPerfState;
     ULONG MinPerfState;
     ULONG LowestPState;
     ULONG IncreaseTime;
     ULONG DecreaseTime;
     UCHAR BusyAdjThreshold;
     UCHAR Reserved;
     UCHAR ThrottleStatesOnly;
     UCHAR PolicyType;
     ULONG TimerInterval;
     ULONG Flags;
     ULONG TargetProcessors;
     LONG * PStateHandler;
     ULONG PStateContext;
     LONG * TStateHandler;
     ULONG TStateContext;
     LONG * FeedbackHandler;
     PPM_PERF_STATE State[1];
} PPM_PERF_STATES, *PPPM_PERF_STATES;

typedef struct 
{
     ULONG StateCount;
     ULONG TotalTransitions;
     ULONG ResetCount;
     UINT64 StartTime;
     PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;

typedef struct 
{
     LONG * IdleHandler;
     ULONG Context;
     ULONG Latency;
     ULONG Power;
     ULONG TimeCheck;
     ULONG StateFlags;
     UCHAR PromotePercent;
     UCHAR DemotePercent;
     UCHAR PromotePercentBase;
     UCHAR DemotePercentBase;
     UCHAR StateType;
} PPM_IDLE_STATE, *PPPM_IDLE_STATE;

typedef struct 
{
     ULONG Type;
     ULONG Count;
     ULONG Flags;
     ULONG TargetState;
     ULONG ActualState;
     ULONG OldState;
     ULONG TargetProcessors;
     PPM_IDLE_STATE State[1];
} PPM_IDLE_STATES, *PPPM_IDLE_STATES;
/*
typedef struct _PROCESSOR_POWER_STATE
{
     PVOID IdleFunction;
     PPPM_IDLE_STATES IdleStates;
     UINT64 LastTimeCheck;
     UINT64 LastIdleTime;
     PROCESSOR_IDLE_TIMES IdleTimes;
     PPPM_IDLE_ACCOUNTING IdleAccounting;
     PPPM_PERF_STATES PerfStates;
     ULONG LastKernelUserTime;
     ULONG LastIdleThreadKTime;
     UINT64 LastGlobalTimeHv;
     UINT64 LastProcessorTimeHv;
     UCHAR ThermalConstraint;
     UCHAR LastBusyPercentage;
     BYTE Flags[6];
     KTIMER PerfTimer;
     KDPC PerfDpc;
     ULONG LastSysTime;
     struct _KPRCB *PStateMaster;
     ULONG PStateSet;
     ULONG CurrentPState;
     ULONG Reserved0;
     ULONG DesiredPState;
     ULONG Reserved1;
     ULONG PStateIdleStartTime;
     ULONG PStateIdleTime;
     ULONG LastPStateIdleTime;
     ULONG PStateStartTime;
     ULONG WmiDispatchPtr;
     LONG WmiInterfaceEnabled;
} PROCESSOR_POWER_STATE, *PPROCESSOR_POWER_STATE;

typedef enum _PROCESSOR_CACHE_TYPE
{
         CacheUnified = 0,
         CacheInstruction = 1,
         CacheData = 2,
         CacheTrace = 3
} PROCESSOR_CACHE_TYPE;

typedef struct _CACHE_DESCRIPTOR
{
     UCHAR Level;
     UCHAR Associativity;
     WORD LineSize;
     ULONG Size;
     PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _KPRCB
{
     WORD MinorVersion;
     WORD MajorVersion;
     struct _KTHREAD *CurrentThread;
     struct _KTHREAD *NextThread;
     struct _KTHREAD *IdleThread;
     UCHAR Number;
     UCHAR NestingLevel;
     WORD BuildType;
     ULONG SetMember;
     CHAR CpuType;
     CHAR CpuID;
     union
     {
          WORD CpuStep;
          struct
          {
               UCHAR CpuStepping;
               UCHAR CpuModel;
          };
     };
     KPROCESSOR_STATE ProcessorState;
     ULONG KernelReserved[16];
     ULONG HalReserved[16];
     ULONG CFlushSize;
     UCHAR PrcbPad0[88];
     KSPIN_LOCK_QUEUE LockQueue[33];
     struct _KTHREAD *NpxThread;
     ULONG InterruptCount;
     ULONG KernelTime;
     ULONG UserTime;
     ULONG DpcTime;
     ULONG DpcTimeCount;
     ULONG InterruptTime;
     ULONG AdjustDpcThreshold;
     ULONG PageColor;
     UCHAR SkipTick;
     UCHAR DebuggerSavedIRQL;
     UCHAR NodeColor;
     UCHAR PollSlot;
     ULONG NodeShiftedColor;
     PKNODE ParentNode;
     ULONG MultiThreadProcessorSet;
     struct _KPRCB *MultiThreadSetMaster;
     ULONG SecondaryColorMask;
     ULONG DpcTimeLimit;
     ULONG CcFastReadNoWait;
     ULONG CcFastReadWait;
     ULONG CcFastReadNotPossible;
     ULONG CcCopyReadNoWait;
     ULONG CcCopyReadWait;
     ULONG CcCopyReadNoWaitMiss;
     LONG MmSpinLockOrdering;
     LONG IoReadOperationCount;
     LONG IoWriteOperationCount;
     LONG IoOtherOperationCount;
     LARGE_INTEGER IoReadTransferCount;
     LARGE_INTEGER IoWriteTransferCount;
     LARGE_INTEGER IoOtherTransferCount;
     ULONG CcFastMdlReadNoWait;
     ULONG CcFastMdlReadWait;
     ULONG CcFastMdlReadNotPossible;
     ULONG CcMapDataNoWait;
     ULONG CcMapDataWait;
     ULONG CcPinMappedDataCount;
     ULONG CcPinReadNoWait;
     ULONG CcPinReadWait;
     ULONG CcMdlReadNoWait;
     ULONG CcMdlReadWait;
     ULONG CcLazyWriteHotSpots;
     ULONG CcLazyWriteIos;
     ULONG CcLazyWritePages;
     ULONG CcDataFlushes;
     ULONG CcDataPages;
     ULONG CcLostDelayedWrites;
     ULONG CcFastReadResourceMiss;
     ULONG CcCopyReadWaitMiss;
     ULONG CcFastMdlReadResourceMiss;
     ULONG CcMapDataNoWaitMiss;
     ULONG CcMapDataWaitMiss;
     ULONG CcPinReadNoWaitMiss;
     ULONG CcPinReadWaitMiss;
     ULONG CcMdlReadNoWaitMiss;
     ULONG CcMdlReadWaitMiss;
     ULONG CcReadAheadIos;
     ULONG KeAlignmentFixupCount;
     ULONG KeExceptionDispatchCount;
     ULONG KeSystemCalls;
     ULONG PrcbPad1[3];
     PP_LOOKASIDE_LIST PPLookasideList[16];
     GENERAL_LOOKASIDE_POOL PPNPagedLookasideList[32];
     GENERAL_LOOKASIDE_POOL PPPagedLookasideList[32];
     ULONG PacketBarrier;
     LONG ReverseStall;
     PVOID IpiFrame;
     UCHAR PrcbPad2[52];
     VOID * CurrentPacket[3];
     ULONG TargetSet;
     PVOID WorkerRoutine;
     ULONG IpiFrozen;
     UCHAR PrcbPad3[40];
     ULONG RequestSummary;
     struct _KPRCB *SignalDone;
     UCHAR PrcbPad4[56];
     KDPC_DATA DpcData[2];
     PVOID DpcStack;
     LONG MaximumDpcQueueDepth;
     ULONG DpcRequestRate;
     ULONG MinimumDpcRate;
     UCHAR DpcInterruptRequested;
     UCHAR DpcThreadRequested;
     UCHAR DpcRoutineActive;
     UCHAR DpcThreadActive;
     ULONG PrcbLock;
     ULONG DpcLastCount;
     ULONG TimerHand;
     ULONG TimerRequest;
     PVOID PrcbPad41;
     KEVENT DpcEvent;
     UCHAR ThreadDpcEnable;
     UCHAR QuantumEnd;
     UCHAR PrcbPad50;
     UCHAR IdleSchedule;
     LONG DpcSetEventRequest;
     LONG Sleeping;
     ULONG PeriodicCount;
     ULONG PeriodicBias;
     UCHAR PrcbPad5[6];
     LONG TickOffset;
     KDPC CallDpc;
     LONG ClockKeepAlive;
     UCHAR ClockCheckSlot;
     UCHAR ClockPollCycle;
     UCHAR PrcbPad6[2];
     LONG DpcWatchdogPeriod;
     LONG DpcWatchdogCount;
     LONG ThreadWatchdogPeriod;
     LONG ThreadWatchdogCount;
     ULONG PrcbPad70[2];
     LIST_ENTRY WaitListHead;
     ULONG WaitLock;
     ULONG ReadySummary;
     ULONG QueueIndex;
     SINGLE_LIST_ENTRY DeferredReadyListHead;
     UINT64 StartCycles;
     UINT64 CycleTime;
     UINT64 PrcbPad71[3];
     LIST_ENTRY DispatcherReadyListHead[32];
     PVOID ChainedInterruptList;
     LONG LookasideIrpFloat;
     LONG MmPageFaultCount;
     LONG MmCopyOnWriteCount;
     LONG MmTransitionCount;
     LONG MmCacheTransitionCount;
     LONG MmDemandZeroCount;
     LONG MmPageReadCount;
     LONG MmPageReadIoCount;
     LONG MmCacheReadCount;
     LONG MmCacheIoCount;
     LONG MmDirtyPagesWriteCount;
     LONG MmDirtyWriteIoCount;
     LONG MmMappedPagesWriteCount;
     LONG MmMappedWriteIoCount;
     ULONG CachedCommit;
     ULONG CachedResidentAvailable;
     PVOID HyperPte;
     UCHAR CpuVendor;
     UCHAR PrcbPad9[3];
     UCHAR VendorString[13];
     UCHAR InitialApicId;
     UCHAR CoresPerPhysicalProcessor;
     UCHAR LogicalProcessorsPerPhysicalProcessor;
     ULONG MHz;
     ULONG FeatureBits;
     LARGE_INTEGER UpdateSignature;
     UINT64 IsrTime;
     UINT64 SpareField1;
     FX_SAVE_AREA NpxSaveArea;
     PROCESSOR_POWER_STATE PowerState;
     KDPC DpcWatchdogDpc;
     KTIMER DpcWatchdogTimer;
     PVOID WheaInfo;
     PVOID EtwSupport;
     SLIST_HEADER InterruptObjectPool;
     LARGE_INTEGER HypercallPagePhysical;
     PVOID HypercallPageVirtual;
     PVOID RateControl;
     CACHE_DESCRIPTOR Cache[5];
     ULONG CacheCount;
     ULONG CacheProcessorMask[5];
     UCHAR LogicalProcessorsPerCore;
     UCHAR PrcbPad8[3];
     ULONG PackageProcessorSet;
     ULONG CoreProcessorSet;
} KPRCB, *PKPRCB;

typedef struct _KTHREAD
{
     DISPATCHER_HEADER Header;
     UINT64 CycleTime;
     ULONG HighCycleTime;
     UINT64 QuantumTarget;
     PVOID InitialStack;
     PVOID StackLimit;
     PVOID KernelStack;
     ULONG ThreadLock;
     union
     {
          KAPC_STATE ApcState;
          UCHAR ApcStateFill[23];
     };
     CHAR Priority;
     WORD NextProcessor;
     WORD DeferredProcessor;
     ULONG ApcQueueLock;
     ULONG ContextSwitches;
     UCHAR State;
     UCHAR NpxState;
     UCHAR WaitIrql;
     CHAR WaitMode;
     LONG WaitStatus;
     union
     {
          PKWAIT_BLOCK WaitBlockList;
          PKGATE GateObject;
     };
     union
     {
          ULONG KernelStackResident: 1;
          ULONG ReadyTransition: 1;
          ULONG ProcessReadyQueue: 1;
          ULONG WaitNext: 1;
          ULONG SystemAffinityActive: 1;
          ULONG Alertable: 1;
          ULONG GdiFlushActive: 1;
          ULONG Reserved: 25;
          LONG MiscFlags;
     };
     UCHAR WaitReason;
     UCHAR SwapBusy;
     UCHAR Alerted[2];
     union
     {
          LIST_ENTRY WaitListEntry;
          SINGLE_LIST_ENTRY SwapListEntry;
     };
     PKQUEUE Queue;
     ULONG WaitTime;
     union
     {
          struct
          {
               SHORT KernelApcDisable;
               SHORT SpecialApcDisable;
          };
          ULONG CombinedApcDisable;
     };
     PVOID Teb;
     union
     {
          KTIMER Timer;
          UCHAR TimerFill[40];
     };
     union
     {
          ULONG AutoAlignment: 1;
          ULONG DisableBoost: 1;
          ULONG EtwStackTraceApc1Inserted: 1;
          ULONG EtwStackTraceApc2Inserted: 1;
          ULONG CycleChargePending: 1;
          ULONG CalloutActive: 1;
          ULONG ApcQueueable: 1;
          ULONG EnableStackSwap: 1;
          ULONG GuiThread: 1;
          ULONG ReservedFlags: 23;
          LONG ThreadFlags;
     };
     union
     {
          KWAIT_BLOCK WaitBlock[4];
          struct
          {
               UCHAR WaitBlockFill0[23];
               UCHAR IdealProcessor;
          };
          struct
          {
               UCHAR WaitBlockFill1[47];
               CHAR PreviousMode;
          };
          struct
          {
               UCHAR WaitBlockFill2[71];
               UCHAR ResourceIndex;
          };
          UCHAR WaitBlockFill3[95];
     };
     UCHAR LargeStack;
     LIST_ENTRY QueueListEntry;
     PKTRAP_FRAME TrapFrame;
     PVOID FirstArgument;
     union
     {
          PVOID CallbackStack;
          ULONG CallbackDepth;
     };
     PVOID ServiceTable;
     UCHAR ApcStateIndex;
     CHAR BasePriority;
     CHAR PriorityDecrement;
     UCHAR Preempted;
     UCHAR AdjustReason;
     CHAR AdjustIncrement;
     UCHAR Spare01;
     CHAR Saturation;
     ULONG SystemCallNumber;
     ULONG Spare02;
     ULONG UserAffinity;
     PKPROCESS Process;
     ULONG Affinity;
     PKAPC_STATE ApcStatePointer[2];
     union
     {
          KAPC_STATE SavedApcState;
          UCHAR SavedApcStateFill[23];
     };
     CHAR FreezeCount;
     CHAR SuspendCount;
     UCHAR UserIdealProcessor;
     UCHAR Spare03;
     UCHAR Iopl;
     PVOID Win32Thread;
     PVOID StackBase;
     union
     {
          KAPC SuspendApc;
          struct
          {
               UCHAR SuspendApcFill0[1];
               CHAR Spare04;
          };
          struct
          {
               UCHAR SuspendApcFill1[3];
               UCHAR QuantumReset;
          };
          struct
          {
               UCHAR SuspendApcFill2[4];
               ULONG KernelTime;
          };
          struct
          {
               UCHAR SuspendApcFill3[36];
               PKPRCB WaitPrcb;
          };
          struct
          {
               UCHAR SuspendApcFill4[40];
               PVOID LegoData;
          };
          UCHAR SuspendApcFill5[47];
     };
     UCHAR PowerState;
     ULONG UserTime;
     union
     {
          KSEMAPHORE SuspendSemaphore;
          UCHAR SuspendSemaphorefill[20];
     };
     ULONG SListFaultCount;
     LIST_ENTRY ThreadListEntry;
     LIST_ENTRY MutantListHead;
     PVOID SListFaultAddress;
     PVOID MdlForLockedTeb;
} KTHREAD, *PKTHREAD;

typedef struct _KMUTANT
{
     DISPATCHER_HEADER Header;
     LIST_ENTRY MutantListEntry;
     PKTHREAD OwnerThread;
     UCHAR Abandoned;
     UCHAR ApcDisable;
} KMUTANT, *PKMUTANT;*/

typedef struct _KTMOBJECT_NAMESPACE
{
     RTL_AVL_TABLE Table;
     KMUTANT Mutex;
     WORD LinksOffset;
     WORD GuidOffset;
     UCHAR Expired;
} KTMOBJECT_NAMESPACE, *PKTMOBJECT_NAMESPACE;

typedef struct _CLS_LSN
{
     UINT64 ullOffset;
} CLS_LSN, *PCLS_LSN;
/*
typedef struct _IO_CLIENT_EXTENSION
{
     struct _IO_CLIENT_EXTENSION *NextExtension;
     PVOID ClientIdentificationAddress;
} IO_CLIENT_EXTENSION, *PIO_CLIENT_EXTENSION;

typedef struct _FS_FILTER_CALLBACKS
{
     ULONG SizeOfFsFilterCallbacks;
     ULONG Reserved;
     LONG * PreAcquireForSectionSynchronization;
     PVOID PostAcquireForSectionSynchronization;
     LONG * PreReleaseForSectionSynchronization;
     PVOID PostReleaseForSectionSynchronization;
     LONG * PreAcquireForCcFlush;
     PVOID PostAcquireForCcFlush;
     LONG * PreReleaseForCcFlush;
     PVOID PostReleaseForCcFlush;
     LONG * PreAcquireForModifiedPageWriter;
     PVOID PostAcquireForModifiedPageWriter;
     LONG * PreReleaseForModifiedPageWriter;
     PVOID PostReleaseForModifiedPageWriter;
} FS_FILTER_CALLBACKS, *PFS_FILTER_CALLBACKS;

typedef struct _DRIVER_EXTENSION
{
     struct _DRIVER_OBJECT *DriverObject;
     LONG * AddDevice;
     ULONG Count;
     UNICODE_STRING ServiceKeyName;
     PIO_CLIENT_EXTENSION ClientDriverExtension;
     PFS_FILTER_CALLBACKS FsFilterCallbacks;
} DRIVER_EXTENSION, *PDRIVER_EXTENSION;

typedef struct _FAST_IO_DISPATCH
{
     ULONG SizeOfFastIoDispatch;
     UCHAR * FastIoCheckIfPossible;
     UCHAR * FastIoRead;
     UCHAR * FastIoWrite;
     UCHAR * FastIoQueryBasicInfo;
     UCHAR * FastIoQueryStandardInfo;
     UCHAR * FastIoLock;
     UCHAR * FastIoUnlockSingle;
     UCHAR * FastIoUnlockAll;
     UCHAR * FastIoUnlockAllByKey;
     UCHAR * FastIoDeviceControl;
     PVOID AcquireFileForNtCreateSection;
     PVOID ReleaseFileForNtCreateSection;
     PVOID FastIoDetachDevice;
     UCHAR * FastIoQueryNetworkOpenInfo;
     LONG * AcquireForModWrite;
     UCHAR * MdlRead;
     UCHAR * MdlReadComplete;
     UCHAR * PrepareMdlWrite;
     UCHAR * MdlWriteComplete;
     UCHAR * FastIoReadCompressed;
     UCHAR * FastIoWriteCompressed;
     UCHAR * MdlReadCompleteCompressed;
     UCHAR * MdlWriteCompleteCompressed;
     UCHAR * FastIoQueryOpen;
     LONG * ReleaseForModWrite;
     LONG * AcquireForCcFlush;
     LONG * ReleaseForCcFlush;
} FAST_IO_DISPATCH, *PFAST_IO_DISPATCH;

typedef struct _DRIVER_OBJECT
{
     SHORT Type;
     SHORT Size;
     struct _DEVICE_OBJECT *DeviceObject;
     ULONG Flags;
     PVOID DriverStart;
     ULONG DriverSize;
     PVOID DriverSection;
     PDRIVER_EXTENSION DriverExtension;
     UNICODE_STRING DriverName;
     PUNICODE_STRING HardwareDatabase;
     PFAST_IO_DISPATCH FastIoDispatch;
     LONG * DriverInit;
     PVOID DriverStartIo;
     PVOID DriverUnload;
     LONG * MajorFunction[28];
} DRIVER_OBJECT, *PDRIVER_OBJECT;

typedef struct _MDL
{
     struct _MDL *Next;
     SHORT Size;
     SHORT MdlFlags;
     struct _EPROCESS *Process;
     PVOID MappedSystemVa;
     PVOID StartVa;
     ULONG ByteCount;
     ULONG ByteOffset;
} MDL, *PMDL;

typedef struct _EX_PUSH_LOCK
{
     union
     {
          ULONG Locked: 1;
          ULONG Waiting: 1;
          ULONG Waking: 1;
          ULONG MultipleShared: 1;
          ULONG Shared: 28;
          ULONG Value;
          PVOID Ptr;
     };
} EX_PUSH_LOCK, *PEX_PUSH_LOCK;

typedef struct _EX_RUNDOWN_REF
{
     union
     {
          ULONG Count;
          PVOID Ptr;
     };
} EX_RUNDOWN_REF, *PEX_RUNDOWN_REF;

typedef struct _FAST_MUTEX
{
     LONG Count;
     struct _KTHREAD *Owner;
     ULONG Contention;
     KEVENT Gate;
     ULONG OldIrql;
} FAST_MUTEX, *PFAST_MUTEX;

typedef struct _CLIENT_ID
{
     PVOID UniqueProcess;
     PVOID UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef struct _HANDLE_TRACE_DB_ENTRY
{
     CLIENT_ID ClientId;
     PVOID Handle;
     ULONG Type;
     VOID * StackTrace[16];
} HANDLE_TRACE_DB_ENTRY, *PHANDLE_TRACE_DB_ENTRY;

typedef struct _HANDLE_TRACE_DEBUG_INFO
{
     LONG RefCount;
     ULONG TableSize;
     ULONG BitMaskFlags;
     FAST_MUTEX CloseCompactionLock;
     ULONG CurrentStackIndex;
     HANDLE_TRACE_DB_ENTRY TraceDb[1];
} HANDLE_TRACE_DEBUG_INFO, *PHANDLE_TRACE_DEBUG_INFO;

typedef struct _HANDLE_TABLE
{
     ULONG TableCode;
     struct _EPROCESS *QuotaProcess;
     PVOID UniqueProcessId;
     EX_PUSH_LOCK HandleLock;
     LIST_ENTRY HandleTableList;
     EX_PUSH_LOCK HandleContentionEvent;
     PHANDLE_TRACE_DEBUG_INFO DebugInfo;
     LONG ExtraInfoPages;
     ULONG Flags;
     ULONG StrictFIFO: 1;
     LONG FirstFreeHandle;
     PHANDLE_TABLE_ENTRY LastFreeHandleEntry;
     LONG HandleCount;
     ULONG NextHandleNeedingPool;
} HANDLE_TABLE, *PHANDLE_TABLE;

typedef struct _EX_FAST_REF
{
     union
     {
          PVOID Object;
          ULONG RefCnt: 3;
          ULONG Value;
     };
} EX_FAST_REF, *PEX_FAST_REF;

typedef struct _MMADDRESS_NODE
{
     ULONG u1;
     struct _MMADDRESS_NODE *LeftChild;
     struct _MMADDRESS_NODE *RightChild;
     ULONG StartingVpn;
     ULONG EndingVpn;
} MMADDRESS_NODE, *PMMADDRESS_NODE;

typedef struct _MM_AVL_TABLE
{
     MMADDRESS_NODE BalancedRoot;
     ULONG DepthOfTree: 5;
     ULONG Unused: 3;
     ULONG NumberGenericTableElements: 24;
     PVOID NodeHint;
     PVOID NodeFreeHint;
} MM_AVL_TABLE, *PMM_AVL_TABLE;

typedef struct _OWNER_ENTRY
{
     ULONG OwnerThread;
     union
     {
          LONG OwnerCount;
          ULONG TableSize;
     };
} OWNER_ENTRY, *POWNER_ENTRY;

typedef struct _ERESOURCE
{
     LIST_ENTRY SystemResourcesList;
     POWNER_ENTRY OwnerTable;
     SHORT ActiveCount;
     WORD Flag;
     PKSEMAPHORE SharedWaiters;
     PKEVENT ExclusiveWaiters;
     OWNER_ENTRY OwnerEntry;
     ULONG ActiveEntries;
     ULONG ContentionCount;
     ULONG NumberOfSharedWaiters;
     ULONG NumberOfExclusiveWaiters;
     union
     {
          PVOID Address;
          ULONG CreatorBackTraceIndex;
     };
     ULONG SpinLock;
} ERESOURCE, *PERESOURCE;

typedef struct _EJOB
{
     KEVENT Event;
     LIST_ENTRY JobLinks;
     LIST_ENTRY ProcessListHead;
     ERESOURCE JobLock;
     LARGE_INTEGER TotalUserTime;
     LARGE_INTEGER TotalKernelTime;
     LARGE_INTEGER ThisPeriodTotalUserTime;
     LARGE_INTEGER ThisPeriodTotalKernelTime;
     ULONG TotalPageFaultCount;
     ULONG TotalProcesses;
     ULONG ActiveProcesses;
     ULONG TotalTerminatedProcesses;
     LARGE_INTEGER PerProcessUserTimeLimit;
     LARGE_INTEGER PerJobUserTimeLimit;
     ULONG LimitFlags;
     ULONG MinimumWorkingSetSize;
     ULONG MaximumWorkingSetSize;
     ULONG ActiveProcessLimit;
     ULONG Affinity;
     UCHAR PriorityClass;
     PJOB_ACCESS_STATE AccessState;
     ULONG UIRestrictionsClass;
     ULONG EndOfJobTimeAction;
     PVOID CompletionPort;
     PVOID CompletionKey;
     ULONG SessionId;
     ULONG SchedulingClass;
     UINT64 ReadOperationCount;
     UINT64 WriteOperationCount;
     UINT64 OtherOperationCount;
     UINT64 ReadTransferCount;
     UINT64 WriteTransferCount;
     UINT64 OtherTransferCount;
     ULONG ProcessMemoryLimit;
     ULONG JobMemoryLimit;
     ULONG PeakProcessMemoryUsed;
     ULONG PeakJobMemoryUsed;
     ULONG CurrentJobMemoryUsed;
     EX_PUSH_LOCK MemoryLimitsLock;
     LIST_ENTRY JobSetLinks;
     ULONG MemberLevel;
     ULONG JobFlags;
} EJOB, *PEJOB;

typedef struct _EPROCESS_QUOTA_ENTRY
{
     SIZE_T Usage;
     SIZE_T Limit;
     SIZE_T Peak;
     SIZE_T Return;
} EPROCESS_QUOTA_ENTRY, *PEPROCESS_QUOTA_ENTRY;

typedef struct _EPROCESS_QUOTA_BLOCK            // 4 elements, 0x40 bytes (sizeof)
{
  struct _EPROCESS_QUOTA_ENTRY QuotaEntry[3];
  struct _LIST_ENTRY QuotaList;               // 2 elements, 0x8 bytes (sizeof)
  ULONG32      ReferenceCount;
  ULONG32      ProcessCount;
}EPROCESS_QUOTA_BLOCK, *PEPROCESS_QUOTA_BLOCK;

typedef struct _PROCESS_WS_WATCH_INFORMATION // 2 elements, 0x8 bytes (sizeof)
{
     VOID*        FaultingPc;
     VOID*        FaultingVa;
}PROCESS_WS_WATCH_INFORMATION, *PPROCESS_WS_WATCH_INFORMATION;

typedef struct _PAGEFAULT_HISTORY                      // 5 elements, 0x18 bytes (sizeof)
{
     ULONG32      CurrentIndex;
     ULONG32      MaxIndex;
     ULONG32      SpinLock;
     VOID*        Reserved;
     struct _PROCESS_WS_WATCH_INFORMATION WatchInfo[1];
}PAGEFAULT_HISTORY, *PPAGEFAULT_HISTORY;

#if defined(_WIN64)
typedef struct _HARDWARE_PTE
{
     union
     {
          ULONGLONG Valid: 1;
          ULONGLONG Write: 1;
          ULONGLONG Owner: 1;
          ULONGLONG WriteThrough: 1;
          ULONGLONG CacheDisable: 1;
          ULONGLONG Accessed: 1;
          ULONGLONG Dirty: 1;
          ULONGLONG LargePage: 1;
          ULONGLONG Global: 1;
          ULONGLONG CopyOnWrite: 1;
          ULONGLONG Prototype: 1;
          ULONGLONG reserved0: 1;
          ULONGLONG PageFrameNumber: 26;
          ULONGLONG reserved1: 26;
          ULONGLONG LowPart;
     };
     ULONG HighPart;
} HARDWARE_PTE, *PHARDWARE_PTE;
#else
typedef struct _HARDWARE_PTE
{
     union
     {
          ULONG Valid: 1;
          ULONG Write: 1;
          ULONG Owner: 1;
          ULONG WriteThrough: 1;
          ULONG CacheDisable: 1;
          ULONG Accessed: 1;
          ULONG Dirty: 1;
          ULONG LargePage: 1;
          ULONG Global: 1;
          ULONG CopyOnWrite: 1;
          ULONG Prototype: 1;
          ULONG reserved0: 1;
          ULONG PageFrameNumber: 26;
          ULONG reserved1: 26;
          ULONG LowPart;
     };
     ULONG HighPart;
} HARDWARE_PTE, *PHARDWARE_PTE;
#endif

typedef struct _PEB_LDR_DATA
{
     ULONG Length;
     UCHAR Initialized;
     PVOID SsHandle;
     LIST_ENTRY InLoadOrderModuleList;
     LIST_ENTRY InMemoryOrderModuleList;
     LIST_ENTRY InInitializationOrderModuleList;
     PVOID EntryInProgress;
} PEB_LDR_DATA, *PPEB_LDR_DATA;

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
     WORD Flags;
     WORD Length;
     ULONG TimeStamp;
     STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;

typedef struct _CURDIR
{
     UNICODE_STRING DosPath;
     PVOID Handle;
} CURDIR, *PCURDIR;

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
     ULONG MaximumLength;
     ULONG Length;
     ULONG Flags;
     ULONG DebugFlags;
     PVOID ConsoleHandle;
     ULONG ConsoleFlags;
     PVOID StandardInput;
     PVOID StandardOutput;
     PVOID StandardError;
     CURDIR CurrentDirectory;
     UNICODE_STRING DllPath;
     UNICODE_STRING ImagePathName;
     UNICODE_STRING CommandLine;
     PVOID Environment;
     ULONG StartingX;
     ULONG StartingY;
     ULONG CountX;
     ULONG CountY;
     ULONG CountCharsX;
     ULONG CountCharsY;
     ULONG FillAttribute;
     ULONG WindowFlags;
     ULONG ShowWindowFlags;
     UNICODE_STRING WindowTitle;
     UNICODE_STRING DesktopInfo;
     UNICODE_STRING ShellInfo;
     UNICODE_STRING RuntimeData;
     RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
     ULONG EnvironmentSize;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;*/
/*
typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
     WORD Type;
     WORD CreatorBackTraceIndex;
     struct _RTL_CRITICAL_SECTION *CriticalSection;
     LIST_ENTRY ProcessLocksList;
     ULONG EntryCount;
     ULONG ContentionCount;
     ULONG Flags;
     WORD CreatorBackTraceIndexHigh;
     WORD SpareUSHORT;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;

typedef struct _RTL_CRITICAL_SECTION
{
     PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
     LONG LockCount;
     LONG RecursionCount;
     PVOID OwningThread;
     PVOID LockSemaphore;
     ULONG SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;*/
/*
typedef struct _PEB_FREE_BLOCK
{
     struct _PEB_FREE_BLOCK *Next;
     ULONG Size;
} PEB_FREE_BLOCK, *PPEB_FREE_BLOCK;*/

typedef struct tagACTCTX_SECTION_KEYED_DATA {
  ULONG  cbSize;
  ULONG  ulDataFormatVersion;
  PVOID  lpData;
  ULONG  ulLength;
  PVOID  lpSectionGlobalData;
  ULONG  ulSectionGlobalDataLength;
  PVOID  lpSectionBase;
  ULONG  ulSectionTotalLength;
  HANDLE hActCtx;
  HANDLE ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;

typedef struct _ACTIVATION_CONTEXT_DATA
{
     ULONG Magic;
     ULONG HeaderSize;
     ULONG FormatVersion;
     ULONG TotalSize;
     ULONG DefaultTocOffset;
     ULONG ExtendedTocOffset;
     ULONG AssemblyRosterOffset;
     ULONG Flags;
} ACTIVATION_CONTEXT_DATA, *PACTIVATION_CONTEXT_DATA;
/*
typedef struct _PEB
{
     UCHAR InheritedAddressSpace;
     UCHAR ReadImageFileExecOptions;
     UCHAR BeingDebugged;
     UCHAR BitField;
     ULONG ImageUsesLargePages: 1;
     ULONG IsProtectedProcess: 1;
     ULONG IsLegacyProcess: 1;
     ULONG IsImageDynamicallyRelocated: 1;
     ULONG SpareBits: 4;
     PVOID Mutant;
     PVOID ImageBaseAddress;
     PPEB_LDR_DATA Ldr;
     PRTL_USER_PROCESS_PARAMETERS ProcessParameters;
     PVOID SubSystemData;
     PVOID ProcessHeap;
     PRTL_CRITICAL_SECTION FastPebLock;
     PVOID AtlThunkSListPtr;
     PVOID IFEOKey;
     ULONG CrossProcessFlags;
     ULONG ProcessInJob: 1;
     ULONG ProcessInitializing: 1;
     ULONG ReservedBits0: 30;
     union
     {
          PVOID KernelCallbackTable;
          PVOID UserSharedInfoPtr;
     };
     ULONG SystemReserved[1];
     ULONG SpareUlong;
     PPEB_FREE_BLOCK FreeList;
     ULONG TlsExpansionCounter;
     PVOID TlsBitmap;
     ULONG TlsBitmapBits[2];
     PVOID ReadOnlySharedMemoryBase;
     PVOID HotpatchInformation;
     VOID * * ReadOnlyStaticServerData;
     PVOID AnsiCodePageData;
     PVOID OemCodePageData;
     PVOID UnicodeCaseTableData;
     ULONG NumberOfProcessors;
     ULONG NtGlobalFlag;
     LARGE_INTEGER CriticalSectionTimeout;
     ULONG HeapSegmentReserve;
     ULONG HeapSegmentCommit;
     ULONG HeapDeCommitTotalFreeThreshold;
     ULONG HeapDeCommitFreeBlockThreshold;
     ULONG NumberOfHeaps;
     ULONG MaximumNumberOfHeaps;
     VOID * * ProcessHeaps;
     PVOID GdiSharedHandleTable;
     PVOID ProcessStarterHelper;
     ULONG GdiDCAttributeList;
     PRTL_CRITICAL_SECTION LoaderLock;
     ULONG OSMajorVersion;
     ULONG OSMinorVersion;
     WORD OSBuildNumber;
     WORD OSCSDVersion;
     ULONG OSPlatformId;
     ULONG ImageSubsystem;
     ULONG ImageSubsystemMajorVersion;
     ULONG ImageSubsystemMinorVersion;
     ULONG ImageProcessAffinityMask;
     ULONG GdiHandleBuffer[34];
     PVOID PostProcessInitRoutine;
     PVOID TlsExpansionBitmap;
     ULONG TlsExpansionBitmapBits[32];
     ULONG SessionId;
     ULARGE_INTEGER AppCompatFlags;
     ULARGE_INTEGER AppCompatFlagsUser;
     PVOID pShimData;
     PVOID AppCompatInfo;
     UNICODE_STRING CSDVersion;
     PACTIVATION_CONTEXT_DATA ActivationContextData;
     PASSEMBLY_STORAGE_MAP ProcessAssemblyStorageMap;
     PACTIVATION_CONTEXT_DATA SystemDefaultActivationContextData;
     PASSEMBLY_STORAGE_MAP SystemAssemblyStorageMap;
     ULONG MinimumStackCommit;
     PFLS_CALLBACK_INFO FlsCallback;
     LIST_ENTRY FlsListHead;
     PVOID FlsBitmap;
     ULONG FlsBitmapBits[4];
     ULONG FlsHighIndex;
     PVOID WerRegistrationData;
     PVOID WerShipAssertPtr;
} PEB, *PPEB;

typedef struct _OBJECT_NAME_INFORMATION
{
     UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;

typedef struct _SE_AUDIT_PROCESS_CREATION_INFO
{
     POBJECT_NAME_INFORMATION ImageFileName;
} SE_AUDIT_PROCESS_CREATION_INFO, *PSE_AUDIT_PROCESS_CREATION_INFO;

typedef struct _IRP
{
     SHORT Type;
     WORD Size;
     PMDL MdlAddress;
     ULONG Flags;
     ULONG AssociatedIrp;
     LIST_ENTRY ThreadListEntry;
     IO_STATUS_BLOCK IoStatus;
     CHAR RequestorMode;
     UCHAR PendingReturned;
     CHAR StackCount;
     CHAR CurrentLocation;
     UCHAR Cancel;
     UCHAR CancelIrql;
     CHAR ApcEnvironment;
     UCHAR AllocationFlags;
     PIO_STATUS_BLOCK UserIosb;
     PKEVENT UserEvent;
     UINT64 Overlay;
     PVOID CancelRoutine;
     PVOID UserBuffer;
     ULONG Tail;
} IRP, *PIRP;*/
/*
typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
    UCHAR  Type;
    UCHAR  ShareDisposition;
    USHORT  Flags;
    union {
        struct {
            PHYSICAL_ADDRESS  Start;
            ULONG  Length;
        } Generic;
        struct {
            PHYSICAL_ADDRESS  Start;
            ULONG  Length;
        } Port;
        struct {
#if defined(NT_PROCESSOR_GROUPS)
            USHORT  Level;
            USHORT  Group;
#else
            ULONG  Level;
#endif
            ULONG  Vector;
            KAFFINITY Affinity;
        } Interrupt;

        // This member exists only on Windows Vista and later
        struct {
            union {
               struct {
#if defined(NT_PROCESSOR_GROUPS)
                   USHORT  Group;
#else
                   USHORT  Reserved;
#endif
                   USHORT  MessageCount;
                   ULONG  Vector;
                   KAFFINITY  Affinity;
               } Raw;

               struct {
#if defined(NT_PROCESSOR_GROUPS)
                   USHORT  Level;
                   USHORT  Group;
#else
                   ULONG  Level;
#endif
                   ULONG  Vector;
                   KAFFINITY  Affinity;
               } Translated;        
            };
        } MessageInterrupt;
        struct {
            PHYSICAL_ADDRESS  Start;
            ULONG  Length;
        } Memory;
        struct {
            ULONG  Channel;
            ULONG  Port;
            ULONG  Reserved1;
        } Dma;
        struct {  
            ULONG Channel;  
            ULONG RequestLine;  
            UCHAR TransferWidth;  
            UCHAR Reserved1;  
            UCHAR Reserved2;  
            UCHAR Reserved3;  
        } DmaV3;
        struct {
            ULONG  Data[3];
        } DevicePrivate;
        struct {
            ULONG  Start;
            ULONG  Length;
            ULONG  Reserved;
        } BusNumber;
        struct {
            ULONG  DataSize;
            ULONG  Reserved1;
            ULONG  Reserved2;
        } DeviceSpecificData;
        // The following structures provide support for memory-mapped
        // IO resources greater than MAXULONG
        struct {
            PHYSICAL_ADDRESS  Start;
            ULONG  Length40;
        } Memory40;
        struct {
            PHYSICAL_ADDRESS  Start;
            ULONG  Length48;
        } Memory48;
        struct {
            PHYSICAL_ADDRESS  Start;
            ULONG  Length64;
        } Memory64;
        struct {
            UCHAR Class;
            UCHAR Type;
            UCHAR Reserved1;
            UCHAR Reserved2;
            ULONG IdLowPart;
            ULONG IdHighPart;
        } Connection;		  
    } u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR;
*/
/*
typedef struct _MMWSLE
{
     ULONG u1;
} MMWSLE, *PMMWSLE;*/

typedef struct _MMWSLE_NONDIRECT_HASH
{
     PVOID Key;
     ULONG Index;
} MMWSLE_NONDIRECT_HASH, *PMMWSLE_NONDIRECT_HASH;
/*
typedef struct _MMWSLE_HASH
{
     ULONG Index;
} MMWSLE_HASH, *PMMWSLE_HASH;

typedef struct _MMWSL
{
     ULONG FirstFree;
     ULONG FirstDynamic;
     ULONG LastEntry;
     ULONG NextSlot;
     PMMWSLE Wsle;
     PVOID LowestPagableAddress;
     ULONG LastInitializedWsle;
     ULONG NextEstimationSlot;
     ULONG NextAgingSlot;
     ULONG EstimatedAvailable;
     ULONG GrowthSinceLastEstimate;
     ULONG NumberOfCommittedPageTables;
     ULONG VadBitMapHint;
     ULONG NonDirectCount;
     PMMWSLE_NONDIRECT_HASH NonDirectHash;
     PMMWSLE_HASH HashTableStart;
     PMMWSLE_HASH HighestPermittedHashAddress;
     PVOID HighestUserAddress;
     WORD UsedPageTableEntries[1536];
     ULONG CommittedPageTables[48];
} MMWSL, *PMMWSL;*/
/*
typedef struct _MMSUPPORT
{
     LIST_ENTRY WorkingSetExpansionLinks;
     WORD LastTrimStamp;
     WORD NextPageColor;
     MMSUPPORT_FLAGS Flags;
     ULONG PageFaultCount;
     ULONG PeakWorkingSetSize;
     ULONG Spare0;
     ULONG MinimumWorkingSetSize;
     ULONG MaximumWorkingSetSize;
     PMMWSL VmWorkingSetList;
     ULONG Claim;
     ULONG Spare[1];
     ULONG WorkingSetPrivateSize;
     ULONG WorkingSetSizeOverhead;
     ULONG WorkingSetSize;
     PKEVENT ExitEvent;
     EX_PUSH_LOCK WorkingSetMutex;
     PVOID AccessLog;
} MMSUPPORT, *PMMSUPPORT;*/

typedef struct _ALPC_PROCESS_CONTEXT
{
     EX_PUSH_LOCK Lock;
     LIST_ENTRY ViewListHead;
     ULONG PagedPoolQuotaCache;
} ALPC_PROCESS_CONTEXT, *PALPC_PROCESS_CONTEXT;
/*
typedef struct _TERMINATION_PORT
{
     struct _TERMINATION_PORT *Next;
     PVOID Port;
} TERMINATION_PORT, *PTERMINATION_PORT;*/

typedef struct _PSP_RATE_APC
{
    union
    {
        SINGLE_LIST_ENTRY NextApc;
        ULONGLONG ExcessCycles;
    };
    ULONGLONG TargetGEneration;
    KAPC RateApc;
} PSP_RATE_APC, *PPSP_RATE_APC;
/*
typedef struct _ETHREAD
{
     KTHREAD Tcb;
     LARGE_INTEGER CreateTime;
     union
     {
          LARGE_INTEGER ExitTime;
          LIST_ENTRY KeyedWaitChain;
     };
     union
     {
          LONG ExitStatus;
          PVOID OfsChain;
     };
     union
     {
          LIST_ENTRY PostBlockList;
          struct
          {
               PVOID ForwardLinkShadow;
               PVOID StartAddress;
          };
     };
     union
     {
          PTERMINATION_PORT TerminationPort;
          struct _ETHREAD *ReaperLink;
          PVOID KeyedWaitValue;
          PVOID Win32StartParameter;
     };
     ULONG ActiveTimerListLock;
     LIST_ENTRY ActiveTimerListHead;
     CLIENT_ID Cid;
     union
     {
          KSEMAPHORE KeyedWaitSemaphore;
          KSEMAPHORE AlpcWaitSemaphore;
     };
     PS_CLIENT_SECURITY_CONTEXT ClientSecurity;
     LIST_ENTRY IrpList;
     ULONG TopLevelIrp;
     struct _DEVICE_OBJECT *DeviceToVerify;
     PSP_RATE_APC RateControlApc;
     PVOID Win32StartAddress;
     PVOID SparePtr0;
     LIST_ENTRY ThreadListEntry;
     EX_RUNDOWN_REF RundownProtect;
     EX_PUSH_LOCK ThreadLock;
     ULONG ReadClusterSize;
     LONG MmLockOrdering;
     ULONG CrossThreadFlags;
     ULONG Terminated: 1;
     ULONG ThreadInserted: 1;
     ULONG HideFromDebugger: 1;
     ULONG ActiveImpersonationInfo: 1;
     ULONG SystemThread: 1;
     ULONG HardErrorsAreDisabled: 1;
     ULONG BreakOnTermination: 1;
     ULONG SkipCreationMsg: 1;
     ULONG SkipTerminationMsg: 1;
     ULONG CopyTokenOnOpen: 1;
     ULONG ThreadIoPriority: 3;
     ULONG ThreadPagePriority: 3;
     ULONG RundownFail: 1;
     ULONG SameThreadPassiveFlags;
     ULONG ActiveExWorker: 1;
     ULONG ExWorkerCanWaitUser: 1;
     ULONG MemoryMaker: 1;
     ULONG ClonedThread: 1;
     ULONG KeyedEventInUse: 1;
     ULONG RateApcState: 2;
     ULONG SelfTerminate: 1;
     ULONG SameThreadApcFlags;
     ULONG Spare: 1;
     ULONG StartAddressInvalid: 1;
     ULONG EtwPageFaultCalloutActive: 1;
     ULONG OwnsProcessWorkingSetExclusive: 1;
     ULONG OwnsProcessWorkingSetShared: 1;
     ULONG OwnsSystemWorkingSetExclusive: 1;
     ULONG OwnsSystemWorkingSetShared: 1;
     ULONG OwnsSessionWorkingSetExclusive: 1;
     ULONG OwnsSessionWorkingSetShared: 1;
     ULONG OwnsProcessAddressSpaceExclusive: 1;
     ULONG OwnsProcessAddressSpaceShared: 1;
     ULONG SuppressSymbolLoad: 1;
     ULONG Prefetching: 1;
     ULONG OwnsDynamicMemoryShared: 1;
     ULONG OwnsChangeControlAreaExclusive: 1;
     ULONG OwnsChangeControlAreaShared: 1;
     ULONG PriorityRegionActive: 4;
     UCHAR CacheManagerActive;
     UCHAR DisablePageFaultClustering;
     UCHAR ActiveFaultCount;
     ULONG AlpcMessageId;
     union
     {
          PVOID AlpcMessage;
          ULONG AlpcReceiveAttributeSet;
     };
     LIST_ENTRY AlpcWaitListEntry;
     ULONG CacheManagerCount;
} ETHREAD, *PETHREAD;

typedef struct _EPROCESS
{
     KPROCESS Pcb;
     EX_PUSH_LOCK ProcessLock;
     LARGE_INTEGER CreateTime;
     LARGE_INTEGER ExitTime;
     EX_RUNDOWN_REF RundownProtect;
     PVOID UniqueProcessId;
     LIST_ENTRY ActiveProcessLinks;
     ULONG QuotaUsage[3];
     ULONG QuotaPeak[3];
     ULONG CommitCharge;
     ULONG PeakVirtualSize;
     ULONG VirtualSize;
     LIST_ENTRY SessionProcessLinks;
     PVOID DebugPort;
     union
     {
          PVOID ExceptionPortData;
          ULONG ExceptionPortValue;
          ULONG ExceptionPortState: 3;
     };
     PHANDLE_TABLE ObjectTable;
     EX_FAST_REF Token;
     ULONG WorkingSetPage;
     EX_PUSH_LOCK AddressCreationLock;
     PETHREAD RotateInProgress;
     PETHREAD ForkInProgress;
     ULONG HardwareTrigger;
     PMM_AVL_TABLE PhysicalVadRoot;
     PVOID CloneRoot;
     ULONG NumberOfPrivatePages;
     ULONG NumberOfLockedPages;
     PVOID Win32Process;
     PEJOB Job;
     PVOID SectionObject;
     PVOID SectionBaseAddress;
     PEPROCESS_QUOTA_BLOCK QuotaBlock;
     PAGEFAULT_HISTORY WorkingSetWatch;
     PVOID Win32WindowStation;
     PVOID InheritedFromUniqueProcessId;
     PVOID LdtInformation;
     PVOID VadFreeHint;
     PVOID VdmObjects;
     PVOID DeviceMap;
     PVOID EtwDataSource;
     PVOID FreeTebHint;
     union
     {
          HARDWARE_PTE PageDirectoryPte;
          UINT64 Filler;
     };
     PVOID Session;
     UCHAR ImageFileName[16];
     LIST_ENTRY JobLinks;
     PVOID LockedPagesList;
     LIST_ENTRY ThreadListHead;
     PVOID SecurityPort;
     PVOID PaeTop;
     ULONG ActiveThreads;
     ULONG ImagePathHash;
     ULONG DefaultHardErrorProcessing;
     LONG LastThreadExitStatus;
     PPEB Peb;
     EX_FAST_REF PrefetchTrace;
     LARGE_INTEGER ReadOperationCount;
     LARGE_INTEGER WriteOperationCount;
     LARGE_INTEGER OtherOperationCount;
     LARGE_INTEGER ReadTransferCount;
     LARGE_INTEGER WriteTransferCount;
     LARGE_INTEGER OtherTransferCount;
     ULONG CommitChargeLimit;
     ULONG CommitChargePeak;
     PVOID AweInfo;
     SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo;
     MMSUPPORT Vm;
     LIST_ENTRY MmProcessLinks;
     ULONG ModifiedPageCount;
     ULONG Flags2;
     ULONG JobNotReallyActive: 1;
     ULONG AccountingFolded: 1;
     ULONG NewProcessReported: 1;
     ULONG ExitProcessReported: 1;
     ULONG ReportCommitChanges: 1;
     ULONG LastReportMemory: 1;
     ULONG ReportPhysicalPageChanges: 1;
     ULONG HandleTableRundown: 1;
     ULONG NeedsHandleRundown: 1;
     ULONG RefTraceEnabled: 1;
     ULONG NumaAware: 1;
     ULONG ProtectedProcess: 1;
     ULONG DefaultPagePriority: 3;
     ULONG PrimaryTokenFrozen: 1;
     ULONG ProcessVerifierTarget: 1;
     ULONG StackRandomizationDisabled: 1;
     ULONG Flags;
     ULONG CreateReported: 1;
     ULONG NoDebugInherit: 1;
     ULONG ProcessExiting: 1;
     ULONG ProcessDelete: 1;
     ULONG Wow64SplitPages: 1;
     ULONG VmDeleted: 1;
     ULONG OutswapEnabled: 1;
     ULONG Outswapped: 1;
     ULONG ForkFailed: 1;
     ULONG Wow64VaSpace4Gb: 1;
     ULONG AddressSpaceInitialized: 2;
     ULONG SetTimerResolution: 1;
     ULONG BreakOnTermination: 1;
     ULONG DeprioritizeViews: 1;
     ULONG WriteWatch: 1;
     ULONG ProcessInSession: 1;
     ULONG OverrideAddressSpace: 1;
     ULONG HasAddressSpace: 1;
     ULONG LaunchPrefetched: 1;
     ULONG InjectInpageErrors: 1;
     ULONG VmTopDown: 1;
     ULONG ImageNotifyDone: 1;
     ULONG PdeUpdateNeeded: 1;
     ULONG VdmAllowed: 1;
     ULONG SmapAllowed: 1;
     ULONG ProcessInserted: 1;
     ULONG DefaultIoPriority: 3;
     ULONG SparePsFlags1: 2;
     LONG ExitStatus;
     WORD Spare7;
     union
     {
          struct
          {
               UCHAR SubSystemMinorVersion;
               UCHAR SubSystemMajorVersion;
          };
          WORD SubSystemVersion;
     };
     UCHAR PriorityClass;
     MM_AVL_TABLE VadRoot;
     ULONG Cookie;
     ALPC_PROCESS_CONTEXT AlpcContext;
} EPROCESS, *PEPROCESS;

typedef struct _VPB {
   CSHORT Type;
   CSHORT Size;
   USHORT Flags;
   USHORT VolumeLabelLength;
   struct _DEVICE_OBJECT *DeviceObject;
   struct _DEVICE_OBJECT *RealDevice;
   ULONG SerialNumber;
   ULONG ReferenceCount;
   WCHAR VolumeLabel[MAXIMUM_VOLUME_LABEL_LENGTH / sizeof(WCHAR)];
} VPB, *PVPB;

typedef struct _KDEVICE_QUEUE_ENTRY
{
     LIST_ENTRY DeviceListEntry;
     ULONG SortKey;
     UCHAR Inserted;
} KDEVICE_QUEUE_ENTRY, *PKDEVICE_QUEUE_ENTRY;

typedef struct _WAIT_CONTEXT_BLOCK
{
     KDEVICE_QUEUE_ENTRY WaitQueueEntry;
     PIO_ALLOCATION_ACTION DeviceRoutine;
     PVOID DeviceContext;
     ULONG NumberOfMapRegisters;
     PVOID DeviceObject;
     PVOID CurrentIrp;
     PKDPC BufferChainingDpc;
} WAIT_CONTEXT_BLOCK, *PWAIT_CONTEXT_BLOCK;

typedef struct _KDEVICE_QUEUE
{
     SHORT Type;
     SHORT Size;
     LIST_ENTRY DeviceListHead;
     ULONG Lock;
     UCHAR Busy;
} KDEVICE_QUEUE, *PKDEVICE_QUEUE;

typedef struct _ACL
{
     UCHAR AclRevision;
     UCHAR Sbz1;
     WORD AclSize;
     WORD AceCount;
     WORD Sbz2;
} ACL, *PACL;

typedef struct _SECURITY_DESCRIPTOR
{
     UCHAR Revision;
     UCHAR Sbz1;
     WORD Control;
     PVOID Owner;
     PVOID Group;
     PACL Sacl;
     PACL Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR;

typedef struct _DEVICE_OBJECT {
  CSHORT                      Type;
  USHORT                      Size;
  LONG                        ReferenceCount;
  struct _DRIVER_OBJECT  *DriverObject;
  struct _DEVICE_OBJECT  *NextDevice;
  struct _DEVICE_OBJECT  *AttachedDevice;
  struct _IRP  *CurrentIrp;
  PIO_TIMER                   Timer;
  ULONG                       Flags;
  ULONG                       Characteristics;
  volatile PVPB             Vpb;
  PVOID                       DeviceExtension;
  DEVICE_TYPE                 DeviceType;
  CCHAR                       StackSize;
  union {
    LIST_ENTRY         ListEntry;
    WAIT_CONTEXT_BLOCK Wcb;
  } Queue;
  ULONG                       AlignmentRequirement;
  KDEVICE_QUEUE               DeviceQueue;
  KDPC                        Dpc;
  ULONG                       ActiveThreadCount;
  PSECURITY_DESCRIPTOR        SecurityDescriptor;
  KEVENT                      DeviceLock;
  USHORT                      SectorSize;
  USHORT                      Spare1;
  struct _DEVOBJ_EXTENSION  *  DeviceObjectExtension;
  PVOID                       Reserved;
} DEVICE_OBJECT, *PDEVICE_OBJECT;*/

typedef struct _PROCESSOR_NUMBER {
  USHORT Group;
  UCHAR  Number;
  UCHAR  Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;

typedef struct _DEVPROPKEY{
   DEVPROPGUID fmtid;
   DEVPROPID pid;
} DEVPROPKEY, *PDEVPROPKEY;
/*
typedef enum _IO_PRIORITY_HINT { 
  IoPriorityVeryLow   = 0,
  IoPriorityLow       = 1,
  IoPriorityNormal    = 2,
  IoPriorityHigh      = 3,
  IoPriorityCritical  = 4,
  MaxIoPriorityTypes  = 5
} IO_PRIORITY_HINT;

typedef enum _SECURITY_IMPERSONATION_LEVEL { 
  SecurityAnonymous,
  SecurityIdentification,
  SecurityImpersonation,
  SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, *PPSECURITY_IMPERSONATION_LEVEL;

typedef struct _SID_AND_ATTRIBUTES
{
     PVOID Sid;
     ULONG Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;*/

typedef struct _SID_AND_ATTRIBUTES_HASH {
  DWORD               SidCount;
  PSID_AND_ATTRIBUTES SidAttr;
  SID_HASH_ENTRY      Hash[SID_HASH_SIZE];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;

typedef struct _TOKEN_MANDATORY_POLICY {
  DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;
/*
typedef struct _LUID_AND_ATTRIBUTES {
  LUID  Luid;
  DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;

typedef struct _TOKEN_PRIVILEGES {
  DWORD               PrivilegeCount;
  LUID_AND_ATTRIBUTES Privileges[ANYSIZE_ARRAY];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;*/

typedef struct _TOKEN_ACCESS_INFORMATION {
  PSID_AND_ATTRIBUTES_HASH     SidHash;
  PSID_AND_ATTRIBUTES_HASH     RestrictedSidHash;
  PTOKEN_PRIVILEGES            Privileges;
  LUID                         AuthenticationId;
  TOKEN_TYPE                   TokenType;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  TOKEN_MANDATORY_POLICY       MandatoryPolicy;
  DWORD                        Flags;
  DWORD                        AppContainerNumber;
  PSID                         PackageSid;
  PSID_AND_ATTRIBUTES_HASH     CapabilitiesHash;
  PSID                         TrustLevelSid;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;
/*
typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {
   SE_ADT_PARAMETER_TYPE Type;
   ULONG Length;
   ULONG_PTR Data[2];
   PVOID Address;
} SE_ADT_PARAMETER_ARRAY_ENTRY, *PSE_ADT_PARAMETER_ARRAY_ENTRY;

typedef struct _SE_ADT_PARAMETER_ARRAY {
   ULONG CategoryId;
   ULONG AuditId;
   ULONG ParameterCount;
   ULONG Length;
   USHORT FlatSubCategoryId;
   USHORT Type;
   ULONG Flags;
   SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[ SE_MAX_AUDIT_PARAMETERS ];
} SE_ADT_PARAMETER_ARRAY, *PSE_ADT_PARAMETER_ARRAY;

typedef struct _SECTION_OBJECT_POINTERS {
  PVOID DataSectionObject;
  PVOID SharedCacheMap;
  PVOID ImageSectionObject;
} SECTION_OBJECT_POINTERS, *PSECTION_OBJECT_POINTERS;

typedef struct _IO_COMPLETION_CONTEXT
{
     PVOID Port;
     PVOID Key;
} IO_COMPLETION_CONTEXT, *PIO_COMPLETION_CONTEXT;

typedef struct _FILE_OBJECT
{
     SHORT Type;
     SHORT Size;
     PDEVICE_OBJECT DeviceObject;
     PVPB Vpb;
     PVOID FsContext;
     PVOID FsContext2;
     PSECTION_OBJECT_POINTERS SectionObjectPointer;
     PVOID PrivateCacheMap;
     LONG FinalStatus;
     struct _FILE_OBJECT *RelatedFileObject;
     UCHAR LockOperation;
     UCHAR DeletePending;
     UCHAR ReadAccess;
     UCHAR WriteAccess;
     UCHAR DeleteAccess;
     UCHAR SharedRead;
     UCHAR SharedWrite;
     UCHAR SharedDelete;
     ULONG Flags;
     UNICODE_STRING FileName;
     LARGE_INTEGER CurrentByteOffset;
     ULONG Waiters;
     ULONG Busy;
     PVOID LastLock;
     KEVENT Lock;
     KEVENT Event;
     PIO_COMPLETION_CONTEXT CompletionContext;
     ULONG IrpListLock;
     LIST_ENTRY IrpList;
     PVOID FileObjectExtension;
} FILE_OBJECT, *PFILE_OBJECT;

typedef struct _WORK_QUEUE_ITEM
{
     LIST_ENTRY List;
     PVOID WorkerRoutine;
     PVOID Parameter;
} WORK_QUEUE_ITEM, *PWORK_QUEUE_ITEM;*/

typedef struct _KTM
{
     ULONG cookie;
     KMUTANT Mutex;
     KTM_STATE State;
     KTMOBJECT_NAMESPACE_LINK NamespaceLink;
     GUID TmIdentity;
     ULONG Flags;
     ULONG VolatileFlags;
     UNICODE_STRING LogFileName;
     PFILE_OBJECT LogFileObject;
     PVOID MarshallingContext;
     PVOID LogManagementContext;
     KTMOBJECT_NAMESPACE Transactions;
     KTMOBJECT_NAMESPACE ResourceManagers;
     KMUTANT LsnOrderedMutex;
     LIST_ENTRY LsnOrderedList;
     LARGE_INTEGER CommitVirtualClock;
     FAST_MUTEX CommitVirtualClockMutex;
     CLS_LSN BaseLsn;
     CLS_LSN CurrentReadLsn;
     PVOID TmRmHandle;
     struct _KRESOURCEMANAGER *TmRm;
     KEVENT LogFullNotifyEvent;
     WORK_QUEUE_ITEM CheckpointWorkItem;
     CLS_LSN CheckpointTargetLsn;
     WORK_QUEUE_ITEM LogFullCompletedWorkItem;
     ERESOURCE LogWriteResource;
     ULONG LogFlags;
     LONG LogFullStatus;
     LONG RecoveryStatus;
} KTM, *PKTM;

typedef struct _KRESOURCEMANAGER_COMPLETION_BINDING
{
     LIST_ENTRY NotificationListHead;
     PVOID Port;
     ULONG Key;
     PEPROCESS BindingProcess;
} KRESOURCEMANAGER_COMPLETION_BINDING, *PKRESOURCEMANAGER_COMPLETION_BINDING;

typedef struct _KRESOURCEMANAGER
{
     KEVENT NotificationAvailable;
     ULONG cookie;
     KRESOURCEMANAGER_STATE State;
     ULONG Flags;
     KMUTANT Mutex;
     KTMOBJECT_NAMESPACE_LINK NamespaceLink;
     GUID RmId;
     KQUEUE NotificationQueue;
     KMUTANT NotificationMutex;
     LIST_ENTRY EnlistmentHead;
     ULONG EnlistmentCount;
     LONG * NotificationRoutine;
     PVOID Key;
     LIST_ENTRY ProtocolListHead;
     LIST_ENTRY PendingPropReqListHead;
     LIST_ENTRY CRMListEntry;
     PKTM Tm;
     UNICODE_STRING Description;
     KTMOBJECT_NAMESPACE Enlistments;
     KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding;
} KRESOURCEMANAGER, *PKRESOURCEMANAGER;

typedef struct _KTRANSACTION_HISTORY
{
     ULONG RecordType;
     ULONG Payload;
} KTRANSACTION_HISTORY, *PKTRANSACTION_HISTORY;

typedef struct _KTRANSACTION
{
     KEVENT OutcomeEvent;
     ULONG cookie;
     KMUTANT Mutex;
     PKTRANSACTION TreeTx;
     KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink;
     KTMOBJECT_NAMESPACE_LINK TmNamespaceLink;
     GUID UOW;
     KTRANSACTION_STATE State;
     ULONG Flags;
     LIST_ENTRY EnlistmentHead;
     ULONG EnlistmentCount;
     ULONG RecoverableEnlistmentCount;
     ULONG PrePrepareRequiredEnlistmentCount;
     ULONG PrepareRequiredEnlistmentCount;
     ULONG OutcomeRequiredEnlistmentCount;
     ULONG PendingResponses;
     PKENLISTMENT SuperiorEnlistment;
     CLS_LSN LastLsn;
     LIST_ENTRY PromotedEntry;
     PKTRANSACTION PromoterTransaction;
     PVOID PromotePropagation;
     ULONG IsolationLevel;
     ULONG IsolationFlags;
     LARGE_INTEGER Timeout;
     UNICODE_STRING Description;
     PKTHREAD RollbackThread;
     WORK_QUEUE_ITEM RollbackWorkItem;
     KDPC RollbackDpc;
     KTIMER RollbackTimer;
     LIST_ENTRY LsnOrderedEntry;
     KTRANSACTION_OUTCOME Outcome;
     ULONG NextSavepoint;
     PKTM Tm;
     INT64 CommitReservation;
     KTRANSACTION_HISTORY TransactionHistory[10];
     ULONG TransactionHistoryCount;
} KTRANSACTION, *PKTRANSACTION;

typedef struct _KENLISTMENT
{
     ULONG cookie;
     KTMOBJECT_NAMESPACE_LINK NamespaceLink;
     GUID EnlistmentId;
     KMUTANT Mutex;
     LIST_ENTRY NextSameTx;
     LIST_ENTRY NextSameRm;
     PKRESOURCEMANAGER ResourceManager;
     PKTRANSACTION Transaction;
     KENLISTMENT_STATE State;
     ULONG Flags;
     ULONG NotificationMask;
     PVOID Key;
     ULONG KeyRefCount;
     PVOID RecoveryInformation;
     ULONG RecoveryInformationLength;
     PVOID DynamicNameInformation;
     ULONG DynamicNameInformationLength;
     PKTMNOTIFICATION_PACKET FinalNotification;
     int SupSubEnlistment;
     PVOID SupSubEnlHandle;
     PVOID SubordinateTxHandle;
     GUID CrmEnlistmentEnId;
     GUID CrmEnlistmentTmId;
     GUID CrmEnlistmentRmId;
     ULONG NextHistory;
     KENLISTMENT_HISTORY History[20];
} KENLISTMENT, *PKENLISTMENT;
/*
typedef struct _KINTERRUPT
{
     SHORT Type;
     SHORT Size;
     LIST_ENTRY InterruptListEntry;
     UCHAR * ServiceRoutine;
     UCHAR * MessageServiceRoutine;
     ULONG MessageIndex;
     PVOID ServiceContext;
     ULONG SpinLock;
     ULONG TickCount;
     ULONG * ActualLock;
     PVOID DispatchAddress;
     ULONG Vector;
     UCHAR Irql;
     UCHAR SynchronizeIrql;
     UCHAR FloatingSave;
     UCHAR Connected;
     CHAR Number;
     UCHAR ShareVector;
     KINTERRUPT_MODE Mode;
     KINTERRUPT_POLARITY Polarity;
     ULONG ServiceCount;
     ULONG DispatchCount;
     UINT64 Rsvd1;
     ULONG DispatchCode[135];
} KINTERRUPT, *PKINTERRUPT;

typedef struct _KSERVICE_ROUTINE
{
	PKINTERRUPT Interrupt;
	PVOID ServiceContext;
}KSERVICE_ROUTINE, *PKSERVICE_ROUTINE;

typedef struct _IO_CONNECT_INTERRUPT_PARAMETERS {
  ULONG Version;
  union {
    struct {
      PDEVICE_OBJECT    PhysicalDeviceObject;
      PKINTERRUPT       *InterruptObject;
      PKSERVICE_ROUTINE ServiceRoutine;
      PVOID             ServiceContext;
      PKSPIN_LOCK       SpinLock;
      KIRQL             SynchronizeIrql;
      BOOLEAN           FloatingSave;
      BOOLEAN           ShareVector;
      ULONG             Vector;
      KIRQL             Irql;
      KINTERRUPT_MODE   InterruptMode;
      KAFFINITY         ProcessorEnableMask;
      USHORT            Group;
    } FullySpecified;
    struct {
      PDEVICE_OBJECT    PhysicalDeviceObject;
      PKINTERRUPT       *InterruptObject;
      PKSERVICE_ROUTINE ServiceRoutine;
      PVOID             ServiceContext;
      PKSPIN_LOCK       SpinLock;
      KIRQL             SynchronizeIrql;
      BOOLEAN           FloatingSave;
    } LineBased;
    struct {
      PDEVICE_OBJECT            PhysicalDeviceObject;
      union {
        PVOID                      *Generic;
        DWORD *InterruptMessageTable;
        PKINTERRUPT                *InterruptObject;
      } ConnectionContext;
      PVOID MessageServiceRoutine;
      PVOID                     ServiceContext;
      PKSPIN_LOCK               SpinLock;
      KIRQL                     SynchronizeIrql;
      BOOLEAN                   FloatingSave;
      PKSERVICE_ROUTINE         FallBackServiceRoutine;
    } MessageBased;
  };
} IO_CONNECT_INTERRUPT_PARAMETERS, *PIO_CONNECT_INTERRUPT_PARAMETERS;*/

typedef ULONGLONG REGHANDLE, *PREGHANDLE;

typedef struct _EVENT_FILTER_DESCRIPTOR {
  ULONGLONG Ptr;
  ULONG Size;
  ULONG Type;
} EVENT_FILTER_DESCRIPTOR, *PEVENT_FILTER_DESCRIPTOR;

typedef struct _EVENT_DATA_DESCRIPTOR {
  ULONGLONG Ptr;
  ULONG Size;
  ULONG Reserved;
} EVENT_DATA_DESCRIPTOR, *PEVENT_DATA_DESCRIPTOR;

typedef VOID
(NTAPI *PENABLECALLBACK)(
  IN LPCGUID SourceId,
  IN ULONG IsEnabled,
  IN UCHAR Level,
  IN ULONGLONG MatchAnyKeyword,
  IN ULONGLONG MatchAllKeyword,
  IN PEVENT_FILTER_DESCRIPTOR FilterData OPTIONAL,
  IN OUT PVOID CallbackContext OPTIONAL);
  
typedef struct _EVENT_DESCRIPTOR {
  USHORT Id;
  UCHAR Version;
  UCHAR Channel;
  UCHAR Level;
  UCHAR Opcode;
  USHORT Task;
  ULONGLONG Keyword;
} EVENT_DESCRIPTOR, *PEVENT_DESCRIPTOR;
typedef const EVENT_DESCRIPTOR *PCEVENT_DESCRIPTOR;

typedef struct _TXN_PARAMETER_BLOCK {
  USHORT Length;
  USHORT TxFsContext;
  PVOID  TransactionObject;
} TXN_PARAMETER_BLOCK, *PTXN_PARAMETER_BLOCK;

typedef struct _IO_DRIVER_CREATE_CONTEXT {
  CSHORT               Size;
  struct _ECP_LIST  *ExtraCreateParameter;
  PVOID                DeviceObjectHint;
  PTXN_PARAMETER_BLOCK TxnParameters;
} IO_DRIVER_CREATE_CONTEXT, *PIO_DRIVER_CREATE_CONTEXT;
/* End of file */
